
import java_cup.runtime.*;


terminal String CLASS;
terminal String FINAL;
terminal String VOID;
terminal String INT;
terminal String CHAR;
terminal String BOOLEAN;
terminal String FLOAT;
terminal ELSE;
terminal IF;
terminal WHILE;
terminal String RETURN;
terminal READ;
terminal PRINT;
terminal PRINTLINE;
terminal AND;
terminal OR;
terminal ASTERISK;
terminal PLUS;
terminal MINUS;
terminal FSLASH;
terminal SEMI;
terminal EQUALS;
terminal COMMA;
terminal LPAREN;
terminal RPAREN;
terminal String LSQR;
terminal String RSQR;
terminal String LCURLY;
terminal String RCURLY;
terminal String INCREMENT;
terminal String DECREMENT;
terminal NOT;
terminal QUESTION;
terminal COLON;
terminal GT;
terminal LT;
terminal LTE;
terminal GTE;
terminal EQ;
terminal NEQ;
terminal String TRUE;
terminal String FALSE;
terminal String ID;
terminal int NUMBERLIT;
terminal String CHARLIT;
terminal LETTER;
terminal String FLOATLIT;
terminal String STRING;
terminal COMMENT;
terminal MULTILINE;

non terminal Program program;
non terminal Stmts stmts;
non terminal Stmt stmt;
non terminal IfStatement if_statement;
non terminal IfBase if_base;
non terminal WhileStatement while_statement;
non terminal WhileBase while_base;
non terminal FunctionStatement function_statement;
non terminal FielddeclsStatement fielddecls_statement;
non terminal Memberdecls memberdecls;
non terminal Fielddecls fielddecls;
non terminal FielddeclBase fielddecl_base;
non terminal Methoddecls methoddecls;
non terminal Methoddecl methoddecl;
non terminal Fielddecl fielddecl;
non terminal Type type;
non terminal Optionalexpression optionalexpression;
non terminal Argdecls argdecls;
non terminal Optionalfinal optionalfinal;
non terminal Optionalsemi optionalsemi;
non terminal Argdecl argdecl;
non terminal Name name;
non terminal Readlist readlist;
non terminal Printlist printlist;
non terminal Printlinelist printlinelist;
non terminal Args args;
non terminal Expr expression;
non terminal ActionExpr action_expression;
non terminal TernaryExpr ternary_expression;
non terminal TypecastExpr typecast_expression;
non terminal FunctionExpr function_expression;
non terminal FieldsBase fields_base;
non terminal ScopeStatement compount_statement;

precedence left LPAREN, RPAREN, LSQR, RSQR;
precedence right NOT, INCREMENT, DECREMENT;
precedence left LPAREN, RPAREN;
precedence left ASTERISK, FSLASH;
precedence left PLUS, MINUS;
precedence left LT, GT, LTE, GTE;
precedence left NEQ, EQ;
precedence left AND;
precedence left OR;
precedence right QUESTION, COLON;

program ::= CLASS ID:i LCURLY memberdecls:m RCURLY
	                    {: RESULT = new Program(i, m); :}
	     ;

memberdecls ::= methoddecls:m fielddecls:f
                        {: RESULT = new Memberdecls(m, f); :}
                        ;

fields_base ::= fielddecl:f fields_base:fb
                        {: RESULT = new FieldsBase(f, fb); :}
                        |
                        methoddecl:m methoddecls:ms
                        {: RESULT = new FieldsBase(m , ms); :}
                        |
                        {: RESULT = null; :}
                        ;

fielddecls ::= fielddecl:f fielddecls:ff
                        {: RESULT = new Fielddecls(f, ff); :}
                        |
                        {: RESULT = null; :}
                        ;

methoddecls ::= methoddecl:m methoddecls:mm
                        {: RESULT = new Methoddecls(mm, m); :}
                        |
                        {: RESULT = null; :}
                        ;

fielddecl ::= optionalfinal:f fielddecl_base:fb optionalexpression:o SEMI
                        {: RESULT = new FielddeclSingle(f, fb, o); :}
                        |
                        fielddecl_base:fb LSQR NUMBERLIT:n RSQR SEMI
                        {: RESULT = new FielddeclArray(fb, n); :}
                        |
                        fielddecl_base:f optionalexpression:o SEMI
                        {: RESULT = new FielddeclSingle(f, o); :}
                        ;

fielddecl_base ::= type:t IDENTIFIER:i
                        {: RESULT = new FielddeclBase(t, i); :}
                        ;

optionalexpression ::= EQUALS expr:e
                        {: RESULT = e; :}
                        |
                        {: RESULT = null; :}
                        ;

optionalfinal ::= FINAL
                        {: RESULT = new Optionalfinal(); :}
                        ;

methoddecl ::= methoddecl_base:mb LPAREN argdecls:a RPAREN LCURLY fielddecls:f stmts:s RCURLY optionalsemi:o
                        {: RESULT = new Methoddecl(mb, a, f, s, o); :}
                        |
                        methoddecl_base:mb LPAREN argdecls:a RPAREN LCURLY fielddecls:f stmts:s RCURLY optionalsemi:o
                        {: RESULT = new Methoddecl(mb, a, f, s, o); :}
                        ;

methoddecl_base ::= type:t ID:id
                        {: RESULT = new MethoddeclBase(t, id); :}
                        |
                        VOID ID:id
                        {: RESULT = new MethoddeclBase(new VoidType(), id); :}
                        ;

optionalsemi ::= SEMI
			            {: RESULT = new Optionalsemi(); :}
			            |
			            {: RESULT = null; :}
			            ;

type ::= FLOAT:f
                        {: RESULT = new FloatType(); :}
                        |
                        INT:i
                        {: RESULT = new IntType(); :}
                        |
                        CHAR:c
                        {: RESULT = new CharType(); :}
                        |
                        BOOLEAN:b
                        {: RESULT = new BoolType(); :}
                        ;

argdecls ::= argdecl:a COMMA argdecls:as
                        {: RESULT = new Argdecls(a, as); :}
                        |
                        argdecl:a
                        {: RESULT = new Argdecls(a); :}
                        ;

argdecl ::= type:t ID:id
                        {: RESULT = new Argdecl(t, id); :}
                        |
                        type:t ID:id LSQR RSQR
                        {: RESULT = new Argdecl(t, id); :}
                        ;

stmts ::= stmt:s stmts:ss
                        {: RESULT = new Stmts(s, ss); :}
                        |
                        {: RESULT = null; :}
                        ;

stmt ::= if_statement:i
                        {: RESULT = i; :}
                        |
                        while_statement:w
                        {: RESULT = w; :}
                        |
                        name:n EQUALS expr:e SEMI
                        {: RESULT = new AssmntStatement(n, e); :}
                        |
                        READ LPAREN readlist:r RPAREN SEMI
                        {: RESULT = new ReadStatement(r); :}
                        |
                        PRINT LPAREN printlist:p RPAREN SEMI
                        {: RESULT = new PrintStatement(p); :}
                        |
                        PRINTLINE LPAREN printlinelist:pl RPAREN SEMI
                        {: RESULT = new PrintlineStatement(pl); :}
                        |
                        functionStatement:i
                        {: RESULT = i; :}
                        |
                        RETURN SEMI
                        {: RESULT = new ReturnStatement(); :}
                        |
                        RETURN expr:e SEMI
                        {: RESULT = new ReturnValueStmt(e); :} //create class, remove from ReturnStatement class
                        |
                        name:n INCREMENT SEMI
                        {: RESULT = new NameStmt(n, "++"); :}
                        |
                        name:n DECREMENT SEMI
                        {: RESULT = new NameStmt(n, "--"); :}
                        ;

if_statement ::= if_base:i compound_statement:c1 ELSE compound_statement:c2
                        {: RESULT = new IfStatement(i, c1, c2); :}
                        ;

if_base ::= IF LPAREN expr:e RPAREN
                        {: RESULT = new IfBase(e); :}
                        ;

compound_statement ::= LSQR fieldDeclarations:f statements:s RSQR
                        {: RESULT = new ScopeStatement(f, s); :}
                        ;

while_statement ::= whilebase:w scopestmt:s
                        {: RESULT = new WhileStatement(w, s); :}
                        ;

whilebase ::= WHILE LPAREN expr:e RPAREN
                        {: RESULT = new WhileBase(e); :}
                        ;

function_statement ::= ID:id LPAREN RPAREN SEMI
                        {: RESULT = new FunctionStatement(id); :}
                        |
                        ID:id LPAREN args:a RPAREN
                        {: RESULT = new ArgStatement(id, a); :}
                        ;

fielddecls_statement ::= LCURLY fielddecls:f stmts:s RCURLY optionalsemi:o
                        {: RESULT = new FielddeclsStatement(f, s, o); :}
                        ;

name ::= ID:id
                        {: RESULT = new Name(id); :}
                        |
                        ID:id LSQR expr:e RSQR
                        {: RESULT = new NameArray(id, e); :}
                        ;

args ::= expr:e COMMA args:a
                        {: RESULT = new Args(e, a); :}
        | expr:e
                        {: RESULT = new Args(e); :}
        ;

readlist ::= name:n COMMA readlist:rl
                        {: RESULT = new Readlist(n, rl); :}
        | name:n
                        {: RESULT = new Readlist(n); :}
        ;

printlist ::= expr:e COMMA printlist:p
                        {: RESULT = new Printlist(e, p); :}
        | expr:e
                        {: RESULT = new Printlist(e); :}
        ;

printlinelist ::=
                        {: RESULT = new Printlinelist(); :}
         ;

expression ::= name:n
                        {: RESULT = n; :}
                        |
                        function_expression:f
                        {: RESULT = f; :}
                        |
                        typelit:t
                        {: RESULT = t; :}
                        |
                        LPAREN expr:e RPAREN
                        {: RESULT = new ParenExpr(e); :}
                        |
                        action_expression:a
                        {: RESULT = a; :}
                        |
                        ternary_expression:t
                        {: RESULT = t; :}
                        ;

action_expression ::= NOT expr:e
                        {: RESULT = new UnaryExpr("~", e); :}
                        |
                        MINUS expr:e
                        {: RESULT = new UnaryExpr("-", e); :}
                        |
                        PLUS expr:e
                        {: RESULT = new UnaryExpr("+", e); :}
                        |
                        expr:e1 ASTERISK expr:e2
                        {: RESULT = new BinaryExpr(e1, "*", e2); :}
                        |
                        expr:e1 FSLASH expr:e2
                        {: RESULT = new BinaryExpr(e1, "/", e2); :}
                        |
                        expr:e1 PLUS expr:e2
                        {: RESULT = new BinaryExpr(e1, "+", e2); :}
                        |
                        expr:e1 MINUS expr:e2
                        {: RESULT = new BinaryExpr(e1, "-", e2); :}
                        |
                        expr:e1 LT expr:e2
                        {: RESULT = new BinaryExpr(e1, "<", e2); :}
                        |
                        expr:e1 GT expr:e2
                        {: RESULT = new BinaryExpr(e1, ">", e2); :}
                        |
                        expr:e1 LTE expr:e2
                        {: RESULT = new BinaryExpr(e1, "<=", e2); :}
                        |
                        expr:e1 GTE expr:e2
                        {: RESULT = new BinaryExpr(e1, ">=", e2); :}
                        |
                        expr:e1 EQ expr:e2
                        {: RESULT = new BinaryExpr(e1, "==", e2); :}
                        |
                        expr:e1 NEQ expr:e2
                        {: RESULT = new BinaryExpr(e1, "<>", e2); :}
                        |
                        expr:e1 OR expr:e2
                        {: RESULT = new BinaryExpr(e1, "||", e2); :}
                        |
                        expr:e1 AND expr:e2
                        {: RESULT = new BinaryExpr(e1, "&&", e2); :}
                        |
                        typecast_expression:t
                        {: RESULT = t; :}
                        ;

typecast_expression ::= LPAREN type:t RPAREN expr:e
                        {: RESULT = new TypecastExpr(t, e); :}
                        ;

ternary_expression ::= LPAREN expr:e1 QUESTION expr:e2 COLON expr:e3 RPAREN
                        {: RESULT = new TernaryExpr(e1, e2, e3); :}
                        ;

function_expression ::= ID:id LPAREN RPAREN
                        {: RESULT = new VoidFunctionExpr(id); :}
                        |
                        ID:id LPAREN args:a RPAREN
                        {: RESULT = new ArgFunctionExpr(id, a); :}
                        ;

typelit ::= INTLIT:i
            	        {: RESULT = new IntLit(i); :}
            	        |
            	        CHARLIT:c
            	        {: RESULT = new CharLit(c); :}
            	        |
            	        STRLIT:s
            	        {: RESULT = new StrLit(s); :}
            	        |
            	        FLOATLIT:f
            	        {: RESULT = new FloatLit(f); :}
            	        |
            	        TRUE
            	        {: RESULT = new BoolLit("true"); :}
            	        |
            	        FALSE
            	        {: RESULT = new BoolLit("false"); :}
            	        ;
